<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OnionSeed.Helpers.Security</name>
    </assembly>
    <members>
        <member name="T:OnionSeed.Helpers.Security.ActionExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Action"/> data types.
            </summary>
        </member>
        <member name="M:OnionSeed.Helpers.Security.ActionExtensions.ExecuteInConstrainedRegion(System.Action)">
            <summary>
            Executes the given <see cref="T:System.Action"/> in a <a href="https://docs.microsoft.com/en-us/dotnet/framework/performance/constrained-execution-regions">Constrained Execution Region</a> in memory.
            </summary>
            <param name="action">The <see cref="T:System.Action"/> to be executed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Helpers.Security.InsecureBase`1">
            <summary>
            The base implementation of a tightly controlled context where the unencrypted data in a <see cref="T:System.Security.SecureString"/>
            can be accessed as safely as possible.
            </summary>
            <typeparam name="T">The data type to be used to access the unencrypted data in the <see cref="T:System.Security.SecureString"/>.</typeparam>
            <remarks>This code is adapted from sample code at the <a href="http://netvignettes.wordpress.com/2011/05/09/how-to-use-securestring/">.NET Vignettes</a> blog.</remarks>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureBase`1.#ctor(System.Security.SecureString)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Helpers.Security.InsecureBase`1"/> class,
            providing access to the unencrypted data in the given <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="secureString">The <see cref="T:System.Security.SecureString"/> to be wrapped.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="secureString"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureBase`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:OnionSeed.Helpers.Security.InsecureBase`1"/> class.
            </summary>
            <remarks>This destructor will run only if the <see cref="M:System.IDisposable.Dispose"/> method does not get called.
            It gives the base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.</remarks>
        </member>
        <member name="P:OnionSeed.Helpers.Security.InsecureBase`1.Value">
            <summary>
            Gets the unencrypted data from the <see cref="T:System.Security.SecureString"/> being wrapped.
            </summary>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureBase`1.Dispose">
            <inheritdoc/>
            <remarks>This code added to correctly implement the disposable pattern.</remarks>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureBase`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> if the method has been called directly or indirectly by a user's code.
            Managed and unmanaged resources can be disposed in this mode.
            <c>false</c> if the method has been called by the runtime from inside the finalizer and you should not
            reference other objects. Only unmanaged resources can be disposed in this mode.</param>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureBase`1.InitializeBuffer(System.Int32,System.Int32)">
            <summary>
            Returns a new buffer of type <typeparamref name="T"/>, filled with 0's.
            </summary>
            <param name="chars">The <see cref="T:System.Char"/> count required for the initial value.</param>
            <param name="bytes">The <see cref="T:System.Byte"/> count required for the initial value.</param>
            <returns>A new value of type <typeparamref name="T"/>, filled with the specified number of 0's,
            to act as a buffer for the unencrypted data.</returns>
            <remarks>The number of required 0's is provided in both <see cref="T:System.Char"/> and <see cref="T:System.Byte"/> counts
            because they might differ depending on whether there are unicode characters included in the data.
            Subclasses can use either one to provide an adequate buffer.</remarks>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureBase`1.Initialize">
            <summary>
            Creates an unmanaged context where the unencrypted data in the current <see cref="T:System.Security.SecureString"/> can be accessed.
            </summary>
        </member>
        <member name="T:OnionSeed.Helpers.Security.InsecureByteArray">
            <summary>
            Provides a tightly controlled context where the unencrypted data in a <see cref="T:System.Security.SecureString"/>
            can be accessed as safely as possible, as an array of <see cref="T:System.Byte"/>.
            </summary>
            <remarks>This class is much safer than (and preferred over) <see cref="T:OnionSeed.Helpers.Security.InsecureString"/>.</remarks>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureByteArray.#ctor(System.Security.SecureString)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Helpers.Security.InsecureByteArray"/> class,
            providing access to the unencrypted data in the given <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="secureString">The <see cref="T:System.Security.SecureString"/> to be wrapped.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="secureString"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureByteArray.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureByteArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureByteArray.InitializeBuffer(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Helpers.Security.InsecureCharArray">
            <summary>
            Provides a tightly controlled context where the unencrypted data in a <see cref="T:System.Security.SecureString"/>
            can be accessed as safely as possible, as an array of <see cref="T:System.Char"/>.
            </summary>
            <remarks>This class is much safer than (and preferred over) <see cref="T:OnionSeed.Helpers.Security.InsecureString"/>.</remarks>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureCharArray.#ctor(System.Security.SecureString)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Helpers.Security.InsecureCharArray"/> class,
            providing access to the unencrypted data in the given <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="secureString">The <see cref="T:System.Security.SecureString"/> to be wrapped.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="secureString"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureCharArray.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureCharArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureCharArray.InitializeBuffer(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Helpers.Security.InsecureString">
            <summary>
            Provides a tightly controlled context where the unencrypted data in a <see cref="T:System.Security.SecureString"/>
            can be accessed as safely as possible, as a <see cref="T:System.String"/>.
            </summary>
            <remarks>This class is the least secure way to access the encrypted data in a <see cref="T:System.Security.SecureString"/>,
            but may be necessary in some cases. Where possible, use <see cref="T:OnionSeed.Helpers.Security.InsecureCharArray"/> or <see cref="T:OnionSeed.Helpers.Security.InsecureByteArray"/> instead.</remarks>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureString.#ctor(System.Security.SecureString)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Helpers.Security.InsecureString"/> class,
            providing access to the unencrypted data in the given <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="secureString">The <see cref="T:System.Security.SecureString"/> to be wrapped.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="secureString"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureString.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureString.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Helpers.Security.InsecureString.InitializeBuffer(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Helpers.Security.SecureStringExtensions">
            <summary>
            Contains extension methods relating to the <see cref="T:System.Security.SecureString"/> data type.
            </summary>
        </member>
        <member name="M:OnionSeed.Helpers.Security.SecureStringExtensions.Append(System.Security.SecureString,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Appends all the specified characters to the end of the given <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="secureString">The <see cref="T:System.Security.SecureString"/> to which the characters should be appended.</param>
            <param name="chars">The list of characters to append to the given <see cref="T:System.Security.SecureString"/>.</param>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Security.SecureString"/> has already been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Security.SecureString"/> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Performing this operation would make the length of this <see cref="T:System.Security.SecureString"/> greater than 65,536 characters.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this <see cref="T:System.Security.SecureString"/>.</exception>
        </member>
        <member name="M:OnionSeed.Helpers.Security.SecureStringExtensions.Secure(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Converts the given list of <see cref="T:System.Char"/> into a <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="data">The list of <see cref="T:System.Char"/> to be secured.</param>
            <returns>A new <see cref="T:System.Security.SecureString"/> that contains the data from the given list of <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:OnionSeed.Helpers.Security.SecureStringExtensions.Secure(System.Text.StringBuilder)">
            <summary>
            Converts the data in the given <see cref="T:System.Text.StringBuilder"/> into a <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="data">The <see cref="T:System.Text.StringBuilder"/> that contains the data to be secured.</param>
            <returns>A new <see cref="T:System.Security.SecureString"/> that contains the data from the given <see cref="T:System.Text.StringBuilder"/>.</returns>
            <remarks>This overload exists because <see cref="T:System.Text.StringBuilder"/> does not implement any of the standard collection interfaces,
            and making additional copies of sensitive data (using methods such at <see cref="M:System.Text.StringBuilder.ToString"/>) is discouraged.</remarks>
        </member>
        <member name="M:OnionSeed.Helpers.Security.SecureStringExtensions.ToInsecureString(System.Security.SecureString)">
            <summary>
            Provides access to the data in the given <see cref="T:System.Security.SecureString"/> in a secure, disposable context that works like a <see cref="T:System.String"/>.
            </summary>
            <param name="secureString">The <see cref="T:System.Security.SecureString"/> whose data is to be accessed.</param>
            <returns>A new <see cref="T:OnionSeed.Helpers.Security.InsecureString"/> that provides access to the data in the given <see cref="T:System.Security.SecureString"/>.</returns>
        </member>
        <member name="M:OnionSeed.Helpers.Security.SecureStringExtensions.ToInsecureCharArray(System.Security.SecureString)">
            <summary>
            Provides access to the data in the given <see cref="T:System.Security.SecureString"/> in a secure, disposable context that works like a <see cref="T:System.String"/>.
            </summary>
            <param name="secureString">The <see cref="T:System.Security.SecureString"/> whose data is to be accessed.</param>
            <returns>A new <see cref="T:OnionSeed.Helpers.Security.InsecureCharArray"/> that provides access to the data in the given <see cref="T:System.Security.SecureString"/>.</returns>
        </member>
        <member name="M:OnionSeed.Helpers.Security.SecureStringExtensions.ToInsecureByteArray(System.Security.SecureString)">
            <summary>
            Provides access to the data in the given <see cref="T:System.Security.SecureString"/> in a secure, disposable context that works like a <see cref="T:System.String"/>.
            </summary>
            <param name="secureString">The <see cref="T:System.Security.SecureString"/> whose data is to be accessed.</param>
            <returns>A new <see cref="T:OnionSeed.Helpers.Security.InsecureByteArray"/> that provides access to the data in the given <see cref="T:System.Security.SecureString"/>.</returns>
        </member>
    </members>
</doc>
